module JSON

include "number"
include "string"
include "buffer"
include "char"

let backSlashChar = Char.fromCode(92)
let quoteChar = Char.fromCode(34)

enum JSONType {
  JSONString(String),
  JSONNumber(Number)
}

let serializeString = (data) => {
  let buffer = Buffer.make(0)
  Buffer.addChar(quoteChar, buffer)
  let mut last = 0
  for (let mut i = 0; i < String.length(data); i += 1) {
    let char = String.charCodeAt(i, data)
    if (char == 34 || char == 92) {
      Buffer.addStringSlice(last, i, data, buffer)
      Buffer.addChar(backSlashChar, buffer) 
      last = i
      i += 1
    } else if (char <= 13 && char >= 8) {
      Buffer.addStringSlice(last, i, data, buffer)
      i += 1
      last = i
      match (char) {
        8 => Buffer.addString("\\b", buffer),
        9 => Buffer.addString("\\t", buffer),
        10 => Buffer.addString("\\n", buffer),
        12 => Buffer.addString("\\f", buffer),
        13 => Buffer.addString("\\r", buffer),
      }
    }
  }
  if (last == 0) {
    return "\"" ++ data ++ "\""
  } else {
    Buffer.addStringSlice(last, String.length(data), data, buffer)
    Buffer.addChar(quoteChar, buffer)
    
    // Return
    return Buffer.toString(buffer)
  }
}

let serializeNumber = (data) => {
  return toString(data)
}
/*
let parseNumber = (data) => {
  if (Number.isInteger(data)) {
    return Number.parseInt(data)
  } else {
    return Number.parseFloat(data)
  }
}
*/
let serialize = (data) => {
  match (data) {
    JSONString(str) => {
      return serializeString(str)
    },
    JSONNumber(num) => {
      return toString(num)
    }
  }
}

print(serialize(JSONString("h\\i from gray\bson")))
print(serialize(JSONNumber(123)))
